---
import Layout from '../layouts/Layout.astro'

---

<Layout title="Astron" bgcol="bg-blak" txtcol='text-white'>

    <!-- <section class="px-0 my-3 grid gap-1 sm:grid-cols-2 lg:grid-cols-lemon"> -->
    <section class="container mx-auto px-4">
      <div class="px-0 md:mt-72 sm:my-8 flex 2xl:items-center justify-center">

        <div class="sm:my-8 flex flex-col md:grid grid-cols-3 gap-6">
          
          <div class="md:w-[240px] flex flex-col items-center">
            <h2 class="slideDown text-8xl text-white" id="totalTracks"></h2>
            <p class="w-44 text-center zoom caption delay bg-orangi text-xl text-white mt-6 md:mt-4 p-2">Total Tracks</p>
          </div>
          
          <div class="flex flex-col items-center">
            <h2 class="slideDown text-8xl text-white" id="totalAlbums"></h2>
            <p class="caption delay zoom bg-blueish text-xl text-white mt-6 md:mt-4 p-2">Total Albums</p>
          </div>

          <div class="flex flex-col items-center md:-mt-[20px]">
            <div class="flex gap-0 mt-1.5 sm:mt-0">
              <div class="w-[100px] flex flex-col items-center">
                <p class="caption delay zoom text-sm text-white">Hours</p>
                <h2 class="slideDown text-8xl text-white" id="totalHours"></h2>
              </div>
              <div>
                <p class="caption delay text-gray-500 text-7xl mt-7 mx-4">:</p>
              </div>
              <div class="w-[100px] flex flex-col items-center">
                <p class="caption delay zoom text-sm text-white">Mins</p>
                <h2 class="slideDown text-8xl text-white" id="totalMinutes"></h2>
              </div>
            </div>
            <p class="w-full text-center zoom caption delay bg-lightGreen text-xl text-white mt-6 md:mt-4 p-2">Total Time</p>
          </div>

        </div>
    
      </div>
    </section>


</Layout>


<script>
interface JSONItem{
  trackName: string;
  albumName: string;
  albumDuration: number;
}
const res = await fetch("https://matthewviamusic.com/api/tracks")
const json: JSONItem[] = await res.json()

const tracks: string[] = json.map((x:JSONItem) => x.trackName)
const albums: string[] = json.map((x:JSONItem) => x.albumName)
const albumDuration: number[] = json.map((x:JSONItem) => x.albumDuration)


// TRACKS
const totalTracks = tracks.length
Â 
// ALBUMS
const totalAlbumsInDiscography =  Array.from(new Set(albums))

// TIME
const totalAlbumMinutes =  Array.from(new Set(albumDuration))

function calculateTotalTime(timeArray: number[]): { hours: number; minutes: number; seconds: number } {
    // Convert each item in the array to seconds
    const totalSeconds = timeArray.reduce((acc, albumsDuration) => {
        const [minutes, seconds] = albumsDuration.toString().split('.').map(Number);
        return acc + minutes * 60 + seconds;
    }, 0);

    // Calculate hours, minutes, and remaining seconds
    const hours = Math.floor(totalSeconds / 3600);
    const remainingSeconds = totalSeconds % 3600;
    const minutes = Math.floor(remainingSeconds / 60);
    const seconds = remainingSeconds % 60;

    // Ensure minutes and seconds are double digits when less than 10
    const formattedMinutes = minutes < 10 ? minutes : minutes;
    const formattedSeconds = seconds < 10 ? seconds : seconds;

    return { hours, minutes: formattedMinutes, seconds: formattedSeconds };
}

const totalTime = calculateTotalTime(totalAlbumMinutes)

// console.log(`Total Time: ${totalTime.hours} hours, ${totalTime.minutes < 10 ? '0' : ''}${totalTime.minutes} minutes, ${totalTime.seconds < 10 ? '0' : ''}${totalTime.seconds} seconds`);

let localStorageKey = "animateCounter"

function incrementCounter(
  selector: string,
  current: number,
  target: number,
  duration: number,
  letter: string = ""
) {
  let element = document.getElementById(selector)

  if (current < target && element) {
    current++;
    element.innerText = `${current < 10 ? '0' : ''}${current}${letter}`

    setTimeout(() => {
      incrementCounter(selector, current, target, duration, letter);
    }, Math.abs(Math.floor(duration / target)))
}

  localStorage.setItem(localStorageKey, Date.now().toString())
}

const totalTracksTarget = totalTracks
const totalAlbumsTarget = totalAlbumsInDiscography.length
const totalHoursTarget = totalTime.hours
const totalMinutesTarget = totalTime.minutes

const captions = document.querySelectorAll('.caption')

// Loop through the selected elements and remove the class
    captions.forEach((element: Element) => {
      if (element instanceof HTMLElement) {
        setTimeout(() => {
          element.classList.remove('delay')
      }, 100);
      }
    })

const didRun = localStorage.getItem(localStorageKey);
const lastRunDate = didRun ? new Date(parseInt(didRun, 10)) : null;
const twentyFourHoursAgo = Date.now() - 24 * 60 * 60 * 1000;

// Check localStorage, function has not run in 24 hours - increment values  
if(!lastRunDate || lastRunDate.getTime() <= twentyFourHoursAgo){
  // incrementCounter("totalTracks", 0, totalTracksTarget, 1, "Tracks")
  incrementCounter("totalTracks", 0, totalTracksTarget, 1)
  incrementCounter("totalAlbums", 0, totalAlbumsTarget, 2300)
  incrementCounter("totalHours", 0, totalHoursTarget, 1200)
  incrementCounter("totalMinutes", 0, totalMinutesTarget, 2000)
} else{
  // Check LocalStorage, function ran within 24 hours - render static values
  let staticTracks = document.getElementById('totalTracks')
  let staticAlbums = document.getElementById('totalAlbums')
  let staticHours = document.getElementById('totalHours')
  let staticMins = document.getElementById('totalMinutes')
  staticTracks ? staticTracks.innerText = totalTracksTarget.toFixed() : null  
  staticAlbums ? staticAlbums.innerText = totalAlbumsTarget.toFixed() : null  
  staticHours ? staticHours.innerText = totalHoursTarget.toFixed() : null  
  staticMins ? staticMins.innerText = totalMinutesTarget < 10 ? `0${totalMinutesTarget}` : `${totalMinutesTarget}` : null
}


</script>